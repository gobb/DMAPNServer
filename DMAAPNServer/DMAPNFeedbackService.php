<?php

        
    #################################################################################
    ## Developed by Daniele Margutti                                               ##
    ## http://www.danielemargutti.com                                              ##
    ## mail: daniele.margutti@gmail.com                                            ## 
    ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ##
    ##                                                                             ##
    ## THIS SOFTWARE IS PROVIDED BY MANIFEST INTERACTIVE 'AS IS' AND ANY           ##
    ## EXPRESSED OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE         ##
    ## IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR          ##
    ## PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MANIFEST INTERACTIVE BE          ##
    ## LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR         ##
    ## CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF        ##
    ## SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR             ##
    ## BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,       ##
    ## WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE        ##
    ## OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,           ##
    ## EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.                          ##
    ##                                                                             ##
    ## ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ##
    #################################################################################


    /**
    * @category Apple Push Notification Feedback Service
    * @package  DMAPNFeedbackService
    * @author   Daniele Margutti <daniele.margutti@gmail.com>
    * @license  http://www.apache.org/licenses/LICENSE-2.0
    * @link     https://github.com/malcommac/DMAPNServer
    */

    /**
    * Begin Document
    */

    class DMAPNFeedbackService {
        const kAPPLEAPN_FEEDBACKSERVER_PRODUCTION   =   "feedback.push.apple.com";
        const kAPPLEAPN_FEEDBACKSERVER_DEVELOPMENT  =   "feedback.sandbox.push.apple.com";
        const kAPPLEAPN_FEEDBACKSERVER_PORT         =   2196;
        
        
        private $apn_certificate                    =   null;         // Absolute path to your Production Certificate (PEM)
        private $apn_certificatePswd                =   "";           // Certificate password (if set)
        private $apn_hostName                       =   null;
        private $apn_hostPort                       =   2196;
        private $apn_socket                         =   null;
        private $apn_logfilename                    =   null;
        
        /**
	 * Constructor.
	 *
	 * Initializes a new feedback server
         * The example below initialize a new server using a production certificate.
         * 
	 * <code>
	 * <?php
	 * $APNFeedback = new DMAPNFeedbackService(false);
	 * $APNFeedback->setCertificate("production_cert.pem","");
         * $unregistered_devices = $APNFeedback->unregisteredDevices();
         * if ($unregistered_devices == false)
         *      echo "failed to query feedback server";
         * else
         *      echo vardump($unregistered_devices);
	 * ?>
 	 * </code>
	 *
	 * @param       boolean $isDevCert      true to initialize a development environment (you must use a development certificate), false to use a production certificate
	 * @param       boolean $enable_debug   enable log messages
         * @access 	public
	 */
        
        function __construct($isDevCert=false,$enable_debug=false) {
            $this->apn_hostName = ($isDevCert == true ? self::kAPPLEAPN_FEEDBACKSERVER_DEVELOPMENT : self::kAPPLEAPN_FEEDBACKSERVER_PRODUCTION);
            $this->apn_hostPort = self::kAPPLEAPN_FEEDBACKSERVER_PORT;
            if ($enable_debug == true)
                $this->apn_logfilename = "DMAPNFeedbackService_".date("m.d.y.H.M.s",  time());
        }
        
        /**
	 * Set a certificate for this connection.
         * You must set it before connecting to the server
	 *
         * You can have two different kinds of certificate:
         *  - PRODUCTION CERTIFICATE:   generated by an adhoc/appstore provisioning profile.
         *  - DEVELOPMENT CERTIFICATE:  generated by a development provisioning profile (it uses Apple's APN Sandbox address)
	 *
	 * @param   string  $cert_path         certificate path in PEM format. If you have a P12 certificate you can use https://www.sslshopper.com/ssl-converter.html
         * @param   string  $cert_password     (optional) your certificate password if set. leave and empty string if you have not set any password.
	 * @access  public
	 */
        
        function setCertificate($cert_path = null,$cert_password = "") {
            if (file_exists($cert_path) == false) {
                throw new DMAPNException("Given certificate does not exist at '$cert_path'");
            } else {
                $this->apn_certificate = $cert_path;
                $this->apn_certificatePswd = $cert_password;
            }
        }
        
        
       /**
         * This will check with APNS for any invalid tokens (device uuids who deleted our program)
	 *
         * @return  array       list of all invalid tokens
	 * @access  public
	 */
        function unregisteredDevices() {
            $streamContext = stream_context_create();
            stream_context_set_option($streamContext, 'ssl', 'local_cert', $this->apn_certificate);
            stream_context_set_option($streamContext, 'ssl', 'passphrase', $this->apn_certificatePswd);
	
            $error = null; $errorString=null;
            $connection_string = 'ssl://'.$this->apn_hostName.':'.$this->apn_hostPort;
            $this->logMessage("Connecting at APN: $connection_string");
            $this->apn_socket = stream_socket_client($connection_string, $error, $errorString, 100, (STREAM_CLIENT_CONNECT|STREAM_CLIENT_PERSISTENT), $streamContext);
            
            if(!$this->apn_socket) {
                $this->logMessage("Failed to connect to device: {$error} {$errorString}.");
                return false;
            } else {
                $unregistered_tokens = array();
                
                while ($devcon = fread($this->apn_socket, 38)){
                    $arr = unpack("H*", $devcon);
                    $rawhex = trim(implode("", $arr));
                    $token = substr($rawhex, 12, 64);
                    if(!empty($token))
                        $unregistered_tokens[] = $token;
		}
		fclose($this->apn_socket);
                
                return $unregistered_tokens;
            }
        }
        
       /**
	 * Used to generate a new message log record
         * 
	 * @param   string  $message     a message record to store
	 * @access  private
	 */
        function logMessage($message) {
            if ($this->apn_logfilename == null) // log it's not enabled
                return false;
            
            $message = "[".date("m.d.y.H.M.s",  time())."] ".$message;
            if (file_exists("logs") == false)
                mkdir("logs");
            
            $now_date = date('Y-m-d H:i:s',time());
            $myFile = "logs/".$this->apn_logfilename.".log";
            if (file_exists($myFile) == true) {
                $fh = fopen($myFile, 'a') or die("can't open file");

                if (strlen($message) > 0 && $message[0] == "\n")
                    fwrite($fh, $message);
                else
                    fwrite($fh, $now_date." : ".$message."\n");
                fclose($fh);
            } else {
                file_put_contents($myFile, $now_date." : ".$message."\n");
            }
            return true;
        }
    }
?>
